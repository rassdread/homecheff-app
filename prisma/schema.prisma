// HomeCheff – volledige MVP+ datalaag
// DB: PostgreSQL

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* =========================
   ENUMS
   ========================= */

enum UserRole {
  USER
  ADMIN
}

enum ListingCategory {
  HOMECHEFF   // huisgemaakte maaltijden
  HOMEGROWN   // huis-gekweekte/boerderij producten
  OTHER
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PAUSED
  REMOVED      // door eigenaar
  MODERATED    // door admin
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
  COMPLETED
}

enum ReportStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum NotificationType {
  NEW_LISTING_NEARBY
  RESERVATION_UPDATE
  MESSAGE_RECEIVED
  ADMIN_NOTICE
}

enum TransactionStatus {
  CREATED
  AUTHORIZED
  CAPTURED
  CANCELLED
  REFUNDED
  FAILED
}

/* =========================
   AUTH (compatible met NextAuth)
   ========================= */

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  emailVerified DateTime?
  name          String?
  image         String?

  role          UserRole   @default(USER)
  // Basisprofiel/locatie
  bio           String?
  place         String?    // vrije tekst (“Rotterdam, NL”)
  lat           Float?
  lng           Float?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts      Account[]
  sessions      Session[]

  // App-relaties
  listings      Listing[]
  reservations  Reservation[]   @relation("UserReservationsBuyer")
  sales         Reservation[]   @relation("UserReservationsSeller")
  conversations ConversationParticipant[]
  messages      Message[]       @relation("UserMessages")
  reviewsGiven  Review[]        @relation("UserReviewsGiven")
  reviewsRecv   Review[]        @relation("UserReviewsRecv")
  favorites     Favorite[]
  notifications Notification[]
  deviceTokens  DeviceToken[]
  reports       Report[]        @relation("UserReportsReporter")
  reportedOn    Report[]        @relation("UserReportsTarget")
  adminActions  AdminAction[]
  auditLogs     AuditLog[]
  transactionsSold Transaction[] @relation("UserTransactionsSeller")
  payoutsReceived Payout[] @relation("UserPayoutsReceived")
  sellerProfile SellerProfile?
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* =========================
   LISTINGS & GERELATEERDE TABELLEN
   ========================= */

model Listing {
  id            String          @id @default(cuid())
  ownerId       String
  title         String
  description   String
  priceCents    Int             // integer in centen
  category      ListingCategory
  status        ListingStatus   @default(DRAFT)

  // locatie
  place         String?
  lat           Float?
  lng           Float?

  // zichtbaarheid & meta
  isPublic      Boolean         @default(true)
  viewCount     Int             @default(0)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  media         ListingMedia[]
  tags          ListingTag[]
  reservations  Reservation[]
  favorites     Favorite[]
  reports       Report[]        @relation("ListingReports")
  reviews       Review[]
  auditLogs     AuditLog[]

  @@index([status, category, createdAt])
  @@index([lat, lng])
}

model ListingMedia {
  id        String   @id @default(cuid())
  listingId String
  url       String
  width     Int?
  height    Int?
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId, order])
}

model Tag {
  id    String  @id @default(cuid())
  slug  String  @unique
  label String

  listings ListingTag[]
}

model ListingTag {
  listingId String
  tagId     String

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([listingId, tagId])
  @@index([tagId])
}

/* =========================
   RESERVERINGEN, DM/CHAT, REVIEWS, FAVORIETEN
   ========================= */

model Reservation {
  id           String            @id @default(cuid())
  listingId    String
  buyerId      String            // aanvrager
  sellerId     String            // eigenaar listing (denormalized voor makkelijke queries)
  status       ReservationStatus @default(PENDING)
  message      String?
  quantity     Int               @default(1)

  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  listing  Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  buyer    User    @relation("UserReservationsBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  seller   User    @relation("UserReservationsSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  conversation Conversation?
  transaction  Transaction? @relation("ReservationTransaction")
  transactionId String? @unique

  @@index([buyerId, status, createdAt])
  @@index([sellerId, status, createdAt])
}

model Conversation {
  id            String                      @id @default(cuid())
  reservationId String? @unique
  createdAt     DateTime                    @default(now())

  participants  ConversationParticipant[]
  messages      Message[]

  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  text           String
  createdAt      DateTime @default(now())
  readAt         DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User        @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

model Review {
  id          String   @id @default(cuid())
  listingId   String
  reviewerId  String   // wie geeft review
  revieweeId  String   // wie ontvangt (meestal verkoper)
  rating      Int      // 1..5
  comment     String?
  createdAt   DateTime @default(now())

  listing  Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reviewer User    @relation("UserReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee User    @relation("UserReviewsRecv", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@index([revieweeId, createdAt])
  @@index([listingId])
  @@unique([listingId, reviewerId]) // één review per koper per listing
}

model Favorite {
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([userId, listingId])
  @@index([listingId])
}

/* =========================
   MODERATIE, MELDINGEN, NOTIFICATIES
   ========================= */

model Report {
  id          String       @id @default(cuid())
  listingId   String?
  reporterId  String
  targetUserId String?
  reason      String
  status      ReportStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  resolvedAt  DateTime?

  listing   Listing? @relation("ListingReports", fields: [listingId], references: [id], onDelete: SetNull)
  reporter  User     @relation("UserReportsReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  target    User?    @relation("UserReportsTarget", fields: [targetUserId], references: [id], onDelete: SetNull)

  adminActions AdminAction[]
}

model AdminAction {
  id         String     @id @default(cuid())
  adminId    String
  reportId   String?
  action     String     // e.g. "HIDE_LISTING", "BAN_USER"
  notes      String?
  createdAt  DateTime   @default(now())

  admin  User   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  report Report? @relation(fields: [reportId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  payload   Json
  readAt    DateTime?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

/* =========================
   BETALINGEN / TRANSACTIES (light, uitbreidbaar)
   ========================= */

model Transaction {
  id              String            @id @default(cuid())
  reservationId   String  @unique
  buyerId         String
  sellerId        String
  amountCents     Int               // totaalbedrag
  platformFeeBps  Int     @default(0)   // basispunten (bijv. 500 = 5.00%)
  status          TransactionStatus @default(CREATED)
  provider        String?           // "stripe", "mollie", ...
  providerRef     String?           // paymentIntent id
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // ...oude code verwijderd...
  seller      User        @relation("UserTransactionsSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  reservation Reservation? @relation("ReservationTransaction", fields: [reservationId], references: [id])
  payouts     Payout[]
  refunds     Refund[]

  @@index([buyerId, status, createdAt])
  @@index([sellerId, status, createdAt])
}

model Payout {
  id            String   @id @default(cuid())
  transactionId String
  amountCents   Int
  toUserId      String
  createdAt     DateTime @default(now())
  providerRef   String?

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  toUser      User        @relation("UserPayoutsReceived", fields: [toUserId], references: [id], onDelete: Cascade)
}

model Refund {
  id            String   @id @default(cuid())
  transactionId String
  amountCents   Int
  createdAt     DateTime @default(now())
  providerRef   String?

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

/* =========================
   PUSH / DEVICES & AUDIT
   ========================= */

model DeviceToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  String?  // ios/android/web
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  listingId String?
  action    String   // e.g. "LISTING_CREATE", "LOGIN", "RESERVATION_STATUS_CHANGE"
  meta      Json?
  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  listing Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull)

  @@index([createdAt])
}
// ...existing code...

//
// ------ AUTH ------
enum Role {
  BUYER
  SELLER
  ADMIN
}

// ...existing code...

//
// ------ PRODUCTEN ------
enum ProductCategory {
  CHEFF
  GROWN
  DESIGNER
}

enum Unit {
  PORTION
  STUK
  HUNDRED_G
  KG
  BOSJE
  SET
  METER
  CM
  M2
}

enum DeliveryMode {
  PICKUP
  DELIVERY
  BOTH
}

model SellerProfile {
  id           String    @id @default(cuid())
  userId       String    @unique
  displayName  String?
  bio          String?
  lat          Float?
  lng          Float?
  user         User      @relation(fields: [userId], references: [id])
  products     Product[]
}


model Image {
  id        String   @id @default(cuid())
  fileUrl   String
  sortOrder Int
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id          String          @id @default(cuid())
  sellerId    String
  category    ProductCategory
  title       String
  description String
  priceCents  Int
  unit        Unit
  delivery    DeliveryMode
  createdAt   DateTime        @default(now())
  isActive    Boolean         @default(true)

  seller      SellerProfile   @relation(fields: [sellerId], references: [id])
  images      Image[]

  @@index([category])
  @@index([sellerId])
}
