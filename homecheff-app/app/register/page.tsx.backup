"use client";
import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { signIn } from "next-auth/react";
import { Button } from "@/components/ui/Button";
import { Eye, EyeOff, Mail, Lock, ArrowRight, AlertCircle, CheckCircle, User, MapPin, Heart } from "lucide-react";
import Link from "next/link";

const subscriptionOptions = [
  { label: "Basic ‚Äì ‚Ç¨39 p/m (7% fee)", value: "basic" },
  { label: "Pro ‚Äì ‚Ç¨99 p/m (4% fee)", value: "pro" },
  { label: "Premium ‚Äì ‚Ç¨199 p/m (2% fee)", value: "premium" },
];

const userTypes = [
  {
    id: "chef",
    title: "Chef",
    description: "Verkoop je culinaire creaties",
    icon: "üë®‚Äçüç≥",
    features: ["Gerechten verkopen", "Bezorging & ophalen", "Reviews ontvangen", "Fans verzamelen"]
  },
  {
    id: "garden",
    title: "Garden",
    description: "Deel je groenten en kruiden",
    icon: "üå±",
    features: ["Groenten verkopen", "Seizoensproducten", "Lokale community", "Duurzaamheid"]
  },
  {
    id: "designer",
    title: "Designer",
    description: "Verkoop je handgemaakte items",
    icon: "üé®",
    features: ["Handwerk verkopen", "Custom orders", "Portfolio opbouwen", "Kunstenaarsnetwerk"]
  },
];

const buyerTypes = [
  {
    id: "ontdekker",
    title: "Ontdekker",
    description: "Ik ontdek graag lokale parels en verborgen talenten",
    icon: "üîç"
  },
  {
    id: "verzamelaar",
    title: "Verzamelaar",
    description: "Ik verzamel unieke en bijzondere items",
    icon: "üì¶"
  },
  {
    id: "liefhebber",
    title: "Liefhebber",
    description: "Ik waardeer kwaliteit en vakmanschap",
    icon: "‚ù§Ô∏è"
  },
  {
    id: "avonturier",
    title: "Avonturier",
    description: "Ik zoek nieuwe ervaringen en uitdagingen",
    icon: "üó∫Ô∏è"
  },
  {
    id: "fijnproever",
    title: "Fijnproever",
    description: "Ik geniet van subtiele smaken en details",
    icon: "üëÖ"
  },
  {
    id: "connaisseur",
    title: "Connaisseur",
    description: "Ik heb kennis van kwaliteit en authenticiteit",
    icon: "üé≠"
  },
  {
    id: "genieter",
    title: "Genieter",
    description: "Ik waardeer het goede leven en mooie dingen",
    icon: "‚ú®"
  }
];

type RegisterState = {
  firstName: string;
  lastName: string;
  username: string;
  email: string;
  password: string;
  gender: string;
  userTypes: string[];
  selectedBuyerType: string;
  interests: string[];
  location: string;
  bio: string;
  isBusiness: boolean;
  kvk: string;
  btw: string;
  company: string;
  subscription: string;
  // Uitbetaalgegevens
  bankName: string;
  iban: string;
  accountHolderName: string;
  error: string | null;
  success: boolean;
  showSubscriptions: boolean;
  currentStep: number;
};

function RegisterPage() {
  const router = useRouter();
  const [state, setState] = useState<RegisterState>({
    firstName: "",
    lastName: "",
    username: "",
    email: "",
    password: "",
    gender: "",
    userTypes: [],
    selectedBuyerType: "",
    interests: [],
    location: "",
    bio: "",
    isBusiness: false,
    kvk: "",
    btw: "",
    company: "",
    subscription: "",
    // Uitbetaalgegevens
    bankName: "",
    iban: "",
    accountHolderName: "",
    error: null,
    success: false,
    showSubscriptions: false,
    currentStep: 1,
  });

  const steps = [
    { id: 1, title: "Welkom", description: "Hoe wil je je aanmelden?" },
    { id: 2, title: "Je rol", description: "Wat ga je doen?" },
    { id: 3, title: "Account", description: "Je gegevens" },
    { id: 4, title: "Profiel", description: "Vertel over jezelf" },
    { id: 5, title: "Uitbetaling", description: "Bankgegevens (verkopers)" }
  ];

  function handleBusinessToggle() {
    setState((prev) => ({
      ...prev,
      isBusiness: !prev.isBusiness,
      showSubscriptions: !prev.isBusiness,
      kvk: "",
      btw: "",
      company: "",
      subscription: "",
    }));
  }

  function nextStep() {
    if (state.currentStep < steps.length) {
      setState(prev => ({ ...prev, currentStep: prev.currentStep + 1, error: null }));
    }
  }

  function prevStep() {
    if (state.currentStep > 1) {
      setState(prev => ({ ...prev, currentStep: prev.currentStep - 1, error: null }));
    }
  }

  function handleUserTypeToggle(userType: string) {
    setState(prev => ({
      ...prev,
      userTypes: prev.userTypes.includes(userType)
        ? prev.userTypes.filter(t => t !== userType)
        : [...prev.userTypes, userType]
    }));
  }

  function handleInterestToggle(interest: string) {
    setState(prev => ({
      ...prev,
      interests: prev.interests.includes(interest)
        ? prev.interests.filter(i => i !== interest)
        : [...prev.interests, interest]
    }));
  }

  function handleBuyerTypeSelect(buyerType: string) {
    setState(prev => ({
      ...prev,
      selectedBuyerType: buyerType
    }));
  }

  function handleRegister() {
    if (!state.firstName || !state.lastName || !state.username || !state.email || !state.password || state.userTypes.length === 0) {
      setState({ ...state, error: "Vul alle verplichte velden in.", success: false });
      return;
    }
    if (!state.email.match(/^[^@]+@[^@]+\.[^@]+$/)) {
      setState({ ...state, error: "Voer een geldig e-mailadres in.", success: false });
      return;
    }
    fetch("/api/register", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        email: state.email,
        password: state.password,
        firstName: state.firstName,
        lastName: state.lastName,
        username: state.username,
        gender: state.gender,
        userTypes: state.userTypes,
        interests: state.interests,
        location: state.location,
        bio: state.bio,
        isBusiness: state.isBusiness,
        kvk: state.kvk,
        btw: state.btw,
        company: state.company,
        subscription: state.subscription,
        // Uitbetaalgegevens
        bankName: state.bankName,
        iban: state.iban,
        accountHolderName: state.accountHolderName
      })
    })
      .then(async res => {
        const data = await res.json();
        if (!res.ok) {
          setState(s => ({ ...s, error: data.error || "Registratie mislukt", success: false }));
        } else {
          setState(s => ({ ...s, error: null, success: true }));
          // Automatisch inloggen na registratie
          try {
            await signIn('credentials', {
              email: state.email,
              password: state.password,
              redirect: false
            });
            setTimeout(() => {
              router.push('/profile');
            }, 1200);
          } catch (error) {
            // Als automatisch inloggen mislukt, doorverwijzen naar login
          setTimeout(() => {
              router.push('/login?message=Registratie succesvol! Log in om verder te gaan.');
          }, 1200);
          }
        }
      })
      .catch(() => setState(s => ({ ...s, error: "Server error", success: false })));
  }

  async function handleSocialLogin(provider: string) {
    try {
      const result = await signIn(provider, { 
        callbackUrl: "/profile",
        redirect: true 
      });
    } catch (error) {
      setState({ 
        ...state, 
        error: "Er is een fout opgetreden bij het inloggen met " + provider + ".", 
        success: false 
      });
    }
  }
  return (
    <main className="min-h-screen bg-gradient-to-br from-primary-50 to-secondary-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-emerald-600 to-emerald-700 shadow-lg">
        <div className="max-w-4xl mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center">
                <span className="text-white text-xl font-bold">H</span>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-white">Registreren</h1>
                <p className="text-emerald-100 text-sm">Word onderdeel van de community</p>
              </div>
            </div>
            <div className="text-sm text-white/80 bg-white/10 px-3 py-1 rounded-full">
              Stap {state.currentStep} van {steps.length}
            </div>
          </div>
        </div>
      </header>

      {/* Progress Bar */}
      <div className="bg-white border-b">
        <div className="max-w-4xl mx-auto px-6 py-4">
          <div className="flex items-center space-x-4">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                  state.currentStep >= step.id 
                    ? 'bg-emerald-600 text-white' 
                    : 'bg-gray-200 text-gray-600'
                }`}>
                  {step.id}
                </div>
                <div className="ml-2 hidden sm:block">
                  <div className={`text-sm font-medium ${
                    state.currentStep >= step.id ? 'text-emerald-600' : 'text-gray-600'
                  }`}>
                    {step.title}
                  </div>
                  <div className="text-xs text-gray-500">{step.description}</div>
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-8 h-0.5 mx-4 ${
                    state.currentStep > step.id ? 'bg-emerald-600' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-2xl mx-auto px-6 py-8">
        <div className="bg-white rounded-2xl shadow-lg p-8">
          {state.success ? (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">Welkom bij HomeCheff!</h2>
              <p className="text-gray-600 mb-6">Je account is succesvol aangemaakt. Je wordt doorgestuurd naar je profiel.</p>
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600 mx-auto"></div>
            </div>
          ) : (
            <>
              {/* Step 1: Welkom */}
              {state.currentStep === 1 && (
                <div className="text-center">
                  <div className="mb-8">
                    <h2 className="text-3xl font-bold text-gray-900 mb-4">Welkom bij HomeCheff!</h2>
                    <p className="text-lg text-gray-600 mb-8">Word onderdeel van de lokale community en ontdek unieke producten van je buren</p>
                  </div>

                  {/* Social Login Options */}
                  <div className="space-y-4 mb-8">
                    <button
                      onClick={() => handleSocialLogin("google")}
                      className="w-full max-w-sm mx-auto inline-flex justify-center items-center px-6 py-4 border border-gray-300 rounded-xl shadow-sm bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-all hover:shadow-md"
                    >
                      <svg className="w-6 h-6 mr-3" viewBox="0 0 24 24">
                        <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                        <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                        <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                        <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                      </svg>
                      Doorgaan met Google
                    </button>

                    <button
                      onClick={() => handleSocialLogin("facebook")}
                      className="w-full max-w-sm mx-auto inline-flex justify-center items-center px-6 py-4 border border-gray-300 rounded-xl shadow-sm bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-all hover:shadow-md"
                    >
                      <svg className="w-6 h-6 mr-3" fill="#1877F2" viewBox="0 0 24 24">
                        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                      </svg>
                      Doorgaan met Facebook
                    </button>
                  </div>

                  {/* Divider */}
                  <div className="relative mb-8">
                    <div className="absolute inset-0 flex items-center">
                      <div className="w-full border-t border-gray-300" />
                    </div>
                    <div className="relative flex justify-center text-sm">
                      <span className="px-4 bg-white text-gray-500">of</span>
                    </div>
                  </div>

                  {/* Email Option */}
                  <button
                    onClick={() => setState(prev => ({ ...prev, currentStep: 2 }))}
                    className="w-full max-w-sm mx-auto inline-flex justify-center items-center px-6 py-4 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-all hover:shadow-md font-medium text-base"
                  >
                    <Mail className="w-6 h-6 mr-3" />
                    Aanmelden met email
                  </button>

                  <div className="mt-6 text-sm text-gray-500">
                    <p>Al een account? <Link href="/login" className="text-emerald-600 hover:text-emerald-700 font-medium">Inloggen</Link></p>
                  </div>

                  {/* Role Selection Header */}
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Kies je rollen</h3>
                    <p className="text-gray-600 mb-6">Wat ga je doen op HomeCheff? Je kunt meerdere rollen selecteren.</p>
                  </div>
                  
                  <div className="grid gap-4">
                    {userTypes.map((type) => (
                      <div
                        key={type.id}
                        className={`p-6 border-2 rounded-xl cursor-pointer transition-all ${
                          state.userTypes.includes(type.id)
                            ? 'border-emerald-500 bg-emerald-50'
                            : 'border-gray-200 hover:border-emerald-300'
                        }`}
                        onClick={() => handleUserTypeToggle(type.id)}
                      >
                        <div className="flex items-start space-x-4">
                          <div className="text-3xl">{type.icon}</div>
                          <div className="flex-1">
                            <h3 className="text-lg font-semibold text-gray-900">{type.title}</h3>
                            <p className="text-gray-600 mb-3">{type.description}</p>
                            <div className="flex flex-wrap gap-2">
                              {type.features.map((feature, index) => (
                                <span key={index} className="px-2 py-1 bg-emerald-100 text-emerald-700 text-xs rounded-full">
                                  {feature}
                                </span>
                              ))}
                            </div>
                          </div>
                          <div className={`w-5 h-5 rounded-full border-2 ${
                            state.userTypes.includes(type.id)
                              ? 'border-emerald-500 bg-emerald-500'
                              : 'border-gray-300'
                          }`}>
                            {state.userTypes.includes(type.id) && (
                              <div className="w-full h-full rounded-full bg-white scale-50"></div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  {state.userTypes.length > 0 && (
                    <div className="mt-4 p-3 bg-emerald-50 border border-emerald-200 rounded-lg">
                      <p className="text-sm text-emerald-700">
                        <strong>Geselecteerd:</strong> {state.userTypes.map(id => userTypes.find(t => t.id === id)?.title).join(', ')}
                      </p>
                    </div>
                  )}

                  {state.selectedBuyerType !== "" && state.userTypes.length === 0 && (
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <p className="text-sm text-blue-700">
                        <strong>Koper type geselecteerd:</strong> {buyerTypes.find(t => t.id === state.selectedBuyerType)?.title}
                      </p>
                      <p className="text-xs text-blue-600 mt-1">Je kunt alleen producten kopen, geen verkopen</p>
                    </div>
                  )}


                  {/* Wat voor koper ben je? Sectie */}
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Wat voor koper ben je?</h3>
                    <p className="text-gray-600 mb-6">Definieer jezelf - kies 1 rol die het beste bij je past</p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {buyerTypes.map((type) => (
                        <div
                          key={type.id}
                          className={`p-4 border-2 rounded-xl cursor-pointer transition-all ${
                            state.selectedBuyerType === type.id
                              ? 'border-blue-500 bg-blue-50'
                              : 'border-gray-200 hover:border-blue-300'
                          }`}
                          onClick={() => handleBuyerTypeSelect(type.id)}
                        >
                          <div className="flex items-center space-x-3">
                            <div className="text-2xl">{type.icon}</div>
                            <div className="flex-1">
                              <h4 className="font-medium text-gray-900">{type.title}</h4>
                              <p className="text-sm text-gray-600">{type.description}</p>
                            </div>
                            <div className={`w-5 h-5 rounded-full border-2 ${
                              state.selectedBuyerType === type.id
                                ? 'border-blue-500 bg-blue-500'
                                : 'border-gray-300'
                            }`}>
                              {state.selectedBuyerType === type.id && (
                                <div className="w-full h-full rounded-full bg-white scale-50"></div>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    {state.selectedBuyerType && (
                      <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                        <p className="text-sm text-blue-700">
                          <strong>Gekozen:</strong> {buyerTypes.find(t => t.id === state.selectedBuyerType)?.title}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Step 2: Role Selection */}
              {state.currentStep === 2 && (
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">Kies je rollen</h2>
                  <p className="text-gray-600 mb-8">Wat ga je doen op HomeCheff? Je kunt meerdere rollen selecteren.</p>
                  
                  <div className="grid gap-4">
                    {userTypes.map((type) => (
                      <div
                        key={type.id}
                        className={`p-6 border-2 rounded-xl cursor-pointer transition-all ${
                          state.userTypes.includes(type.id)
                            ? 'border-emerald-500 bg-emerald-50'
                            : 'border-gray-200 hover:border-emerald-300'
                        }`}
                        onClick={() => handleUserTypeToggle(type.id)}
                      >
                        <div className="flex items-start space-x-4">
                          <div className="text-3xl">{type.icon}</div>
                          <div className="flex-1">
                            <h3 className="text-lg font-semibold text-gray-900">{type.title}</h3>
                            <p className="text-gray-600 mb-3">{type.description}</p>
                            <div className="flex flex-wrap gap-2">
                              {type.features.map((feature, index) => (
                                <span key={index} className="px-2 py-1 bg-emerald-100 text-emerald-700 text-xs rounded-full">
                                  {feature}
                                </span>
                              ))}
                            </div>
                          </div>
                          <div className={`w-5 h-5 rounded-full border-2 ${
                            state.userTypes.includes(type.id)
                              ? 'border-emerald-500 bg-emerald-500'
                              : 'border-gray-300'
                          }`}>
                            {state.userTypes.includes(type.id) && (
                              <div className="w-full h-full rounded-full bg-white scale-50"></div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  {state.userTypes.length > 0 && (
                    <div className="mt-4 p-3 bg-emerald-50 border border-emerald-200 rounded-lg">
                      <p className="text-sm text-emerald-700">
                        <strong>Geselecteerd:</strong> {state.userTypes.map(id => userTypes.find(t => t.id === id)?.title).join(', ')}
                      </p>
                    </div>
                  )}

                  {state.selectedBuyerType !== "" && state.userTypes.length === 0 && (
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <p className="text-sm text-blue-700">
                        <strong>Koper type geselecteerd:</strong> {buyerTypes.find(t => t.id === state.selectedBuyerType)?.title}
                      </p>
                      <p className="text-xs text-blue-600 mt-1">Je kunt alleen producten kopen, geen verkopen</p>
                    </div>
                  )}

                  {/* Wat voor koper ben je? Sectie */}
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Wat voor koper ben je?</h3>
                    <p className="text-gray-600 mb-6">Definieer jezelf - kies 1 rol die het beste bij je past</p>
                    
                    <div className="grid gap-3">
                      {buyerTypes.map((type) => (
                        <div
                          key={type.id}
                          className={`p-4 border-2 rounded-xl cursor-pointer transition-all ${
                            state.selectedBuyerType === type.id
                              ? 'border-blue-500 bg-blue-50'
                              : 'border-gray-200 hover:border-blue-300'
                          }`}
                          onClick={() => handleBuyerTypeSelect(type.id)}
                        >
                          <div className="flex items-center space-x-3">
                            <div className="text-2xl">{type.icon}</div>
                            <div className="flex-1">
                              <h4 className="font-semibold text-gray-900">{type.title}</h4>
                              <p className="text-sm text-gray-600">{type.description}</p>
                            </div>
                            <div className={`w-5 h-5 rounded-full border-2 ${
                              state.selectedBuyerType === type.id
                                ? 'border-blue-500 bg-blue-500'
                                : 'border-gray-300'
                            }`}>
                              {state.selectedBuyerType === type.id && (
                                <div className="w-full h-full rounded-full bg-white scale-50"></div>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}

              {/* Step 3: Account Login */}
              {state.currentStep === 3 && (
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">Je account</h2>
                  <p className="text-gray-600 mb-8">Vul je basis gegevens in om je account aan te maken</p>
                  
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Voornaam *</label>
                        <input
                          type="text"
                          value={state.firstName}
                          onChange={e => setState(prev => ({ ...prev, firstName: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                          placeholder="Je voornaam"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Achternaam *</label>
                        <input
                          type="text"
                          value={state.lastName}
                          onChange={e => setState(prev => ({ ...prev, lastName: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                          placeholder="Je achternaam"
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Gebruikersnaam *</label>
                      <input
                        type="text"
                        value={state.username}
                        onChange={e => setState(prev => ({ ...prev, username: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                        placeholder="Unieke gebruikersnaam"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">E-mailadres *</label>
                      <input
                        type="email"
                        value={state.email}
                        onChange={e => setState(prev => ({ ...prev, email: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                        placeholder="je@email.com"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Wachtwoord *</label>
                      <input
                        type="password"
                        value={state.password}
                        onChange={e => setState(prev => ({ ...prev, password: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                        placeholder="Minimaal 8 karakters"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Geslacht</label>
                      <select
                        value={state.gender}
                        onChange={e => setState(prev => ({ ...prev, gender: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                      >
                        <option value="">Maak een keuze</option>
                        <option value="man">Man</option>
                        <option value="vrouw">Vrouw</option>
                        <option value="anders">Anders</option>
                      </select>
                    </div>
                  </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Locatie</label>
                      <input
                        type="text"
                        value={state.location}
                        onChange={e => setState(prev => ({ ...prev, location: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                        placeholder="Stad, provincie"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Bio</label>
                      <textarea
                        value={state.bio}
                        onChange={e => setState(prev => ({ ...prev, bio: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                        rows={3}
                        placeholder="Vertel iets over jezelf..."
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-3">Interesses (optioneel)</label>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                        {['Koken', 'Bakken', 'Groenten kweken', 'Handwerk', 'Kunst', 'Design', 'Duurzaamheid', 'Lokaal', 'Biologisch'].map((interest) => (
                          <button
                            key={interest}
                            type="button"
                            onClick={() => handleInterestToggle(interest)}
                            className={`px-3 py-2 text-sm rounded-lg border transition-all ${
                              state.interests.includes(interest)
                                ? 'bg-emerald-100 border-emerald-500 text-emerald-700'
                                : 'bg-gray-50 border-gray-300 text-gray-700 hover:border-emerald-300'
                            }`}
                          >
                            {interest}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Step 4: Business (Optional) */}
              {state.currentStep === 4 && (
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">Zakelijke informatie</h2>
                  <p className="text-gray-600 mb-8">Optioneel: Voeg zakelijke gegevens toe</p>
                  
                  <div className="space-y-6">
                    <label className="flex items-center space-x-3 p-4 border border-gray-300 rounded-xl cursor-pointer hover:bg-gray-50">
                      <input
                        type="checkbox"
                        checked={state.isBusiness}
                        onChange={handleBusinessToggle}
                        className="w-5 h-5 text-emerald-600 border-gray-300 rounded focus:ring-emerald-500"
                      />
                      <div>
                        <div className="font-medium text-gray-900">Ik schrijf me in als zakelijke verkoper</div>
                        <div className="text-sm text-gray-600">Voeg KVK en bedrijfsgegevens toe</div>
        </div>
          </label>
                    
          {state.isBusiness && (
                      <div className="p-6 bg-gray-50 rounded-xl space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">KVK nummer</label>
                          <input
                            type="text"
                            value={state.kvk}
                            onChange={e => setState(prev => ({ ...prev, kvk: e.target.value }))}
                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                            placeholder="12345678"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">BTW nummer</label>
                          <input
                            type="text"
                            value={state.btw}
                            onChange={e => setState(prev => ({ ...prev, btw: e.target.value }))}
                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                            placeholder="NL123456789B01"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Bedrijfsnaam</label>
                          <input
                            type="text"
                            value={state.company}
                            onChange={e => setState(prev => ({ ...prev, company: e.target.value }))}
                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                            placeholder="Mijn Bedrijf B.V."
                          />
                        </div>
                        
                        <div>
                          <button
                            type="button"
                            onClick={() => setState(prev => ({ ...prev, showSubscriptions: !prev.showSubscriptions }))}
                            className="w-full px-4 py-3 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 transition-colors"
                          >
                            {state.showSubscriptions ? "Abonnementsopties verbergen" : "Abonnementsopties bekijken"}
                </button>
                          
                {state.showSubscriptions && (
                            <div className="mt-4 p-4 bg-white border border-emerald-200 rounded-xl">
                              <h3 className="font-semibold text-gray-900 mb-3">Kies een abonnementsvorm:</h3>
                              <div className="space-y-3">
                    {subscriptionOptions.map(opt => (
                                  <label key={opt.value} className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50">
                                    <input
                                      type="radio"
                                      name="subscription"
                                      value={opt.value}
                                      checked={state.subscription === opt.value}
                                      onChange={e => setState(prev => ({ ...prev, subscription: e.target.value }))}
                                      className="w-4 h-4 text-emerald-600 border-gray-300 focus:ring-emerald-500"
                                    />
                                    <span className="text-sm font-medium text-gray-900">{opt.label}</span>
                      </label>
                    ))}
                              </div>
                            </div>
                          )}

                          {/* Uitbetaalgegevens sectie */}
                          {state.userTypes.length > 0 && (
                            <div className="mt-6 p-6 bg-blue-50 rounded-xl space-y-4">
                              <div className="flex items-center gap-2 mb-4">
                                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                  <span className="text-blue-600 text-sm">üí≥</span>
                                </div>
                                <h3 className="text-lg font-semibold text-gray-900">Uitbetaalgegevens</h3>
                              </div>
                              <p className="text-sm text-gray-600 mb-4">
                                Vul je bankgegevens in om uitbetalingen te ontvangen van je verkopen
                              </p>
                              
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <label className="block text-sm font-medium text-gray-700 mb-2">Banknaam</label>
                                  <input
                                    type="text"
                                    value={state.bankName}
                                    onChange={e => setState(prev => ({ ...prev, bankName: e.target.value }))}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    placeholder="ABN AMRO, ING, Rabobank..."
                                  />
                                </div>
                                <div>
                                  <label className="block text-sm font-medium text-gray-700 mb-2">IBAN</label>
                                  <input
                                    type="text"
                                    value={state.iban}
                                    onChange={e => setState(prev => ({ ...prev, iban: e.target.value }))}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    placeholder="NL91ABNA0417164300"
                                  />
                                </div>
                              </div>
                              
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">Rekeninghouder naam</label>
                                <input
                                  type="text"
                                  value={state.accountHolderName}
                                  onChange={e => setState(prev => ({ ...prev, accountHolderName: e.target.value }))}
                                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                  placeholder="Jouw volledige naam"
                                />
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Error Message */}
              {state.error && (
                <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-xl">
                  <div className="flex items-center">
                    <svg className="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span className="text-red-700">{state.error}</span>
                  </div>
                </div>
              )}

              {/* Navigation Buttons */}
              <div className="mt-8 flex justify-between">
                <Button
                  onClick={prevStep}
                  disabled={state.currentStep === 1}
                  className="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Vorige
                </Button>
                
                {state.currentStep < steps.length ? (
                  <Button
                    onClick={nextStep}
                    disabled={state.currentStep === 1 && state.userTypes.length === 0 && state.selectedBuyerType === ""}
                    className="px-6 py-3 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Volgende
                  </Button>
                ) : (
                  <Button
                    onClick={handleRegister}
                    className="px-8 py-3 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 font-semibold"
                  >
                    Account Aanmaken
                  </Button>
                )}
              </div>
            </>
          )}
        </div>
      </div>
    </main>
  );
}

export default RegisterPage;
