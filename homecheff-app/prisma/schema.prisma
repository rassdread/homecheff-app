generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                     String                    @id @default(uuid())
  email                                  String                    @unique
  createdAt                              DateTime                  @default(now())
  bio                                    String?
  emailVerified                          DateTime?
  image                                  String?
  lat                                    Float?
  lng                                    Float?
  place                                  String?
  updatedAt                              DateTime                  @updatedAt
  role                                   UserRole                  @default(USER)
  name                                   String?
  passwordHash                           String?
  profileImage                           String?
  username                               String?                   @unique
  interests                              String[]
  accountHolderName                      String?
  bankName                               String?
  buyerRoles                             String[]                  @default([])
  displayFullName                        Boolean                   @default(true)
  gender                                 String?
  iban                                   String?
  marketingAccepted                      Boolean                   @default(false)
  marketingAcceptedAt                    DateTime?
  privacyPolicyAccepted                  Boolean                   @default(false)
  privacyPolicyAcceptedAt                DateTime?
  sellerRoles                            String[]                  @default([])
  stripeConnectAccountId                 String?
  stripeConnectOnboardingCompleted       Boolean                   @default(false)
  taxResponsibilityAccepted              Boolean                   @default(false)
  taxResponsibilityAcceptedAt            DateTime?
  termsAccepted                          Boolean                   @default(false)
  termsAcceptedAt                        DateTime?
  allowProfileViews                      Boolean                   @default(true)
  fanRequestEnabled                      Boolean                   @default(true)
  messagePrivacy                         MessagePrivacy            @default(EVERYONE)
  showActivityStatus                     Boolean                   @default(true)
  showFansList                           Boolean                   @default(true)
  showOnlineStatus                       Boolean                   @default(true)
  showProfileToEveryone                  Boolean                   @default(true)
  quote                                  String?
  displayNameOption                      String                    @default("full")
  encryptionEnabled                      Boolean                   @default(false)
  hasEncryptionKey                       Boolean                   @default(false)
  address                                String?
  city                                   String?
  postalCode                             String?
  country                                String?                   @default("NL")
  state                                  String?
  timezone                               String?                   @default("Europe/Amsterdam")
  messageGuidelinesAccepted              Boolean                   @default(false)
  messageGuidelinesAcceptedAt            DateTime?
  socialOnboardingCompleted              Boolean                   @default(true)
  Account                                Account[]
  AdminAction                            AdminAction[]
  AuditLog                               AuditLog[]
  Business                               Business?
  ConversationParticipant                ConversationParticipant[]
  DeliveryProfile                        DeliveryProfile?
  deliveryReviewsAsReviewer              DeliveryReview[]          @relation("DeliveryReviewReviewer")
  DeviceToken                            DeviceToken[]
  Dish                                   Dish[]
  encryptionKeys                         EncryptionKey[]
  fanRequestsAsRequester                 FanRequest[]              @relation("FanRequestRequester")
  fanRequestsAsTarget                    FanRequest[]              @relation("FanRequestTarget")
  Favorite                               Favorite[]
  followsAsFollower                      Follow[]                  @relation("FollowAsFollower")
  followsAsSeller                        Follow[]                  @relation("FollowAsSeller")
  Listing                                Listing[]
  Message                                Message[]
  Notification                           Notification[]
  orders                                 Order[]                   @relation("UserOrders")
  Payout                                 Payout[]
  productReviewsAsBuyer                  ProductReview[]           @relation("ProductReviewBuyer")
  Report_Report_reporterIdToUser         Report[]                  @relation("Report_reporterIdToUser")
  Report_Report_targetUserIdToUser       Report[]                  @relation("Report_targetUserIdToUser")
  Reservation_Reservation_buyerIdToUser  Reservation[]             @relation("Reservation_buyerIdToUser")
  Reservation_Reservation_sellerIdToUser Reservation[]             @relation("Reservation_sellerIdToUser")
  reviewResponsesAsSeller                ReviewResponse[]          @relation("ReviewResponseSeller")
  SellerProfile                          SellerProfile?
  Session                                Session[]
  Transaction                            Transaction[]
  workspaceContentComments               WorkspaceContentComment[]
  workspaceContentProps                  WorkspaceContentProp[]

  @@index([username])
  @@index([name])
  @@index([role])
  @@index([createdAt])
  @@index([city])
  @@index([country])
}

model Business {
  id              String   @id @default(uuid())
  userId          String   @unique
  name            String
  kvkNumber       String?
  vatNumber       String?
  address         String?
  city            String?
  country         String?  @default("NL")
  verified        Boolean  @default(false)
  createdAt       DateTime @default(now())
  workplacePhotos String[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id               String          @id @default(uuid())
  sellerId         String
  category         ProductCategory
  title            String
  description      String
  priceCents       Int
  unit             Unit
  delivery         DeliveryMode
  createdAt        DateTime        @default(now())
  isActive         Boolean         @default(true)
  displayNameType  String          @default("fullname")
  maxStock         Int?
  stock            Int             @default(0)
  availabilityDate DateTime?
  isFutureProduct  Boolean         @default(false)
  subcategory      String?
  conversations    Conversation[]
  deliveryOrders   DeliveryOrder[]
  favorites        Favorite[]
  Image            Image[]
  orderItems       OrderItem[]
  seller           SellerProfile   @relation("SellerProducts", fields: [sellerId], references: [id])
  reviews          ProductReview[]

  @@index([category])
  @@index([sellerId])
  @@index([availabilityDate, isFutureProduct])
  @@index([isActive, createdAt(sort: Desc)])
  @@index([category, isActive])
  @@index([subcategory])
  @@index([delivery])
  @@index([priceCents])
  @@index([category], map: "idx_product_category")
  @@index([sellerId], map: "idx_product_seller")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AdminAction {
  id        String   @id
  adminId   String
  reportId  String?
  action    String
  notes     String?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  Report    Report?  @relation(fields: [reportId], references: [id])
}

model AuditLog {
  id        String   @id
  userId    String?
  listingId String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  Listing   Listing? @relation(fields: [listingId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
}

model Conversation {
  id                      String                    @id
  createdAt               DateTime                  @default(now())
  reservationId           String?                   @unique
  isActive                Boolean                   @default(true)
  lastMessageAt           DateTime?
  productId               String?
  title                   String?
  updatedAt               DateTime                  @updatedAt
  orderId                 String?
  Order                   Order?                    @relation(fields: [orderId], references: [id])
  Product                 Product?                  @relation(fields: [productId], references: [id])
  Reservation             Reservation?              @relation(fields: [reservationId], references: [id])
  ConversationKey         ConversationKey?
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]

  @@index([productId])
  @@index([orderId])
  @@index([lastMessageAt])
  @@index([lastMessageAt], map: "idx_conversation_last_message")
}

model ConversationParticipant {
  id             String       @id
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
  @@index([userId], map: "idx_conversation_participant_user")
}

model ConversationKey {
  id             String       @id @default(uuid())
  conversationId String       @unique
  encryptionKey  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Coupon {
  id              String    @id
  code            String    @unique
  description     String?
  discountCents   Int?
  discountPercent Int?
  validFrom       DateTime?
  validUntil      DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
}

model DeviceToken {
  id        String   @id
  userId    String
  token     String   @unique
  platform  String?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Favorite {
  userId    String
  listingId String?
  createdAt DateTime @default(now())
  id        String   @id @default(uuid())
  productId String?
  Listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@unique([userId, productId])
  @@index([listingId])
  @@index([productId])
  @@index([productId], map: "idx_favorite_product")
}

model Image {
  id        String  @id
  fileUrl   String
  sortOrder Int
  productId String
  Product   Product @relation(fields: [productId], references: [id])

  @@index([productId, sortOrder])
}

model Listing {
  id               String          @id
  ownerId          String
  title            String
  description      String
  priceCents       Int
  category         ListingCategory
  status           ListingStatus   @default(DRAFT)
  place            String?
  lat              Float?
  lng              Float?
  isPublic         Boolean         @default(true)
  viewCount        Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  availabilityDate DateTime?
  isFutureProduct  Boolean         @default(false)
  AuditLog         AuditLog[]
  Favorite         Favorite[]
  User             User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ListingMedia     ListingMedia[]
  ListingTag       ListingTag[]
  Report           Report[]
  Reservation      Reservation[]

  @@index([lat, lng])
  @@index([status, category, createdAt])
  @@index([availabilityDate, isFutureProduct])
}

model ListingMedia {
  id        String   @id
  listingId String
  url       String
  width     Int?
  height    Int?
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  Listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId, order])
}

model ListingTag {
  listingId String
  tagId     String
  Listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  Tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([listingId, tagId])
  @@index([tagId])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  text           String?
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  attachmentName String?
  attachmentType String?
  attachmentUrl  String?
  deletedAt      DateTime?
  editedAt       DateTime?
  messageType    MessageType  @default(TEXT)
  orderNumber    String?
  encryptedText  String?
  encryptionKey  String?
  isEncrypted    Boolean      @default(false)
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt(sort: Desc)])
  @@index([senderId])
  @@index([orderNumber])
  @@index([isEncrypted])
  @@index([readAt])
  @@index([deletedAt])
  @@index([senderId], map: "idx_message_sender")
}

model Notification {
  id        String           @id
  userId    String
  type      NotificationType
  payload   Json
  readAt    DateTime?
  createdAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Payout {
  id            String      @id
  transactionId String
  amountCents   Int
  toUserId      String
  createdAt     DateTime    @default(now())
  providerRef   String?
  User          User        @relation(fields: [toUserId], references: [id], onDelete: Cascade)
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Refund {
  id            String      @id
  transactionId String
  amountCents   Int
  createdAt     DateTime    @default(now())
  providerRef   String?
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Report {
  id                             String        @id
  listingId                      String?
  reporterId                     String
  targetUserId                   String?
  reason                         String
  status                         ReportStatus  @default(OPEN)
  createdAt                      DateTime      @default(now())
  resolvedAt                     DateTime?
  AdminAction                    AdminAction[]
  Listing                        Listing?      @relation(fields: [listingId], references: [id])
  User_Report_reporterIdToUser   User          @relation("Report_reporterIdToUser", fields: [reporterId], references: [id], onDelete: Cascade)
  User_Report_targetUserIdToUser User?         @relation("Report_targetUserIdToUser", fields: [targetUserId], references: [id])
}

model Reservation {
  id                              String            @id
  listingId                       String
  buyerId                         String
  sellerId                        String
  status                          ReservationStatus @default(PENDING)
  message                         String?
  quantity                        Int               @default(1)
  createdAt                       DateTime          @default(now())
  updatedAt                       DateTime
  Conversation                    Conversation?
  User_Reservation_buyerIdToUser  User              @relation("Reservation_buyerIdToUser", fields: [buyerId], references: [id], onDelete: Cascade)
  Listing                         Listing           @relation(fields: [listingId], references: [id], onDelete: Cascade)
  User_Reservation_sellerIdToUser User              @relation("Reservation_sellerIdToUser", fields: [sellerId], references: [id], onDelete: Cascade)
  Transaction                     Transaction?

  @@index([buyerId, status, createdAt])
  @@index([sellerId, status, createdAt])
}

model ProductReview {
  id         String           @id @default(uuid())
  productId  String
  buyerId    String
  orderId    String?
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  buyer      User             @relation("ProductReviewBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  order      Order?           @relation(fields: [orderId], references: [id])
  product    Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  images     ReviewImage[]
  responses  ReviewResponse[]

  @@unique([productId, buyerId])
  @@index([productId])
  @@index([buyerId])
  @@index([rating])
  @@index([buyerId], map: "idx_review_buyer")
  @@index([productId], map: "idx_review_product")
}

model SellerProfile {
  id                     String             @id
  userId                 String             @unique
  displayName            String?
  bio                    String?
  lat                    Float?
  lng                    Float?
  btw                    String?
  companyName            String?
  kvk                    String?
  subscriptionId         String?
  subscriptionValidUntil DateTime?
  createdAt              DateTime           @default(now())
  deliveryMode           String             @default("FIXED")
  deliveryRadius         Float              @default(5.0)
  deliveryRegions        String[]           @default([])
  updatedAt              DateTime           @updatedAt
  products               Product[]          @relation("SellerProducts")
  Subscription           Subscription?      @relation(fields: [subscriptionId], references: [id])
  User                   User               @relation(fields: [userId], references: [id])
  workplacePhotos        WorkplacePhoto[]
  workspaceContent       WorkspaceContent[]

  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String          @id
  name          String
  priceCents    Int
  feeBps        Int
  durationDays  Int
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  SellerProfile SellerProfile[]
}

model Tag {
  id         String       @id
  slug       String       @unique
  label      String
  ListingTag ListingTag[]
}

model Transaction {
  id             String            @id
  reservationId  String            @unique
  buyerId        String
  sellerId       String
  amountCents    Int
  platformFeeBps Int               @default(0)
  status         TransactionStatus @default(CREATED)
  provider       String?
  providerRef    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime
  Payout         Payout[]
  Refund         Refund[]
  Reservation    Reservation       @relation(fields: [reservationId], references: [id])
  User           User              @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([buyerId, status, createdAt])
  @@index([sellerId, status, createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id                   String           @id @default(uuid())
  userId               String
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  orderNumber          String?
  status               OrderStatus      @default(PENDING)
  totalAmount          Int
  deliveryAddress      String?
  deliveryDate         DateTime?
  deliveryMode         DeliveryMode     @default(PICKUP)
  notes                String?
  pickupAddress        String?
  pickupDate           DateTime?
  platformFeeCollected Boolean          @default(false)
  stripeSessionId      String?
  conversations        Conversation[]
  deliveryOrder        DeliveryOrder?
  deliveryReviews      DeliveryReview[]
  User                 User             @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  items                OrderItem[]
  reviews              ProductReview[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int      @default(1)
  priceCents Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Follow {
  id         String   @id @default(uuid())
  followerId String
  sellerId   String
  createdAt  DateTime @default(now())
  User       User     @relation("FollowAsFollower", fields: [followerId], references: [id], onDelete: Cascade)
  Seller     User     @relation("FollowAsSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([followerId, sellerId])
  @@index([sellerId])
  @@index([followerId])
}

model FanRequest {
  id          String           @id @default(uuid())
  requesterId String
  targetId    String
  status      FanRequestStatus @default(PENDING)
  message     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  requester   User             @relation("FanRequestRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  target      User             @relation("FanRequestTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([requesterId, targetId])
  @@index([targetId])
  @@index([status])
}

model Dish {
  id             String              @id @default(uuid())
  userId         String
  title          String?
  description    String?
  status         DishStatus          @default(PRIVATE)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  priceCents     Int?
  deliveryMode   DeliveryMode?
  lat            Float?
  lng            Float?
  place          String?
  maxStock       Int?
  stock          Int?                @default(0)
  category       String?
  subcategory    String?
  difficulty     String?
  ingredients    String[]            @default([])
  instructions   String[]            @default([])
  prepTime       Int?
  servings       Int?
  tags           String[]            @default([])
  growthDuration Int?
  harvestDate    String?
  location       String?
  notes          String?
  plantDate      String?
  plantDistance  String?
  plantType      String?
  soilType       String?
  sunlight       String?
  waterNeeds     String?
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos         DishPhoto[]
  growthPhotos   GardenGrowthPhoto[]
  stepPhotos     RecipeStepPhoto[]

  @@index([userId])
}

model DishPhoto {
  id     String  @id @default(uuid())
  dishId String
  url    String
  idx    Int     @default(0)
  isMain Boolean @default(false)
  dish   Dish    @relation(fields: [dishId], references: [id], onDelete: Cascade)

  @@index([dishId])
}

model RecipeStepPhoto {
  id          String  @id @default(uuid())
  dishId      String
  stepNumber  Int
  url         String
  idx         Int     @default(0)
  description String?
  dish        Dish    @relation(fields: [dishId], references: [id], onDelete: Cascade)

  @@index([dishId])
  @@index([dishId, stepNumber])
}

model GardenGrowthPhoto {
  id          String  @id @default(uuid())
  dishId      String
  phaseNumber Int
  url         String
  idx         Int     @default(0)
  description String?
  dish        Dish    @relation(fields: [dishId], references: [id], onDelete: Cascade)

  @@index([dishId])
  @@index([dishId, phaseNumber])
}

model ReviewImage {
  id        String        @id @default(uuid())
  reviewId  String
  url       String
  sortOrder Int           @default(0)
  review    ProductReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model ReviewResponse {
  id        String        @id @default(uuid())
  reviewId  String
  sellerId  String
  comment   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  review    ProductReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  seller    User          @relation("ReviewResponseSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([sellerId])
}

model DeliveryProfile {
  id                 String               @id @default(cuid())
  userId             String               @unique
  age                Int
  bio                String?
  transportation     TransportationMode[]
  maxDistance        Float                @default(3.0)
  preferredRadius    Float?
  homeLat            Float?
  homeLng            Float?
  homeAddress        String?
  availableDays      String[]
  availableTimeSlots String[]
  isActive           Boolean              @default(true)
  isVerified         Boolean              @default(false)
  totalDeliveries    Int                  @default(0)
  averageRating      Float?
  totalEarnings      Float                @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  currentAddress     String?
  currentLat         Float?
  currentLng         Float?
  deliveryMode       String               @default("FIXED")
  deliveryRegions    String[]             @default([])
  lastLocationUpdate DateTime?
  deliveryOrders     DeliveryOrder[]
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews            DeliveryReview[]
  vehiclePhotos      VehiclePhoto[]

  @@map("DeliveryProfile")
}

model DeliveryOrder {
  id                   String          @id @default(cuid())
  orderId              String          @unique
  deliveryProfileId    String
  status               String          @default("PENDING")
  deliveryFee          Float
  estimatedTime        Int?
  pickedUpAt           DateTime?
  deliveredAt          DateTime?
  currentLat           Float?
  currentLng           Float?
  notes                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  deliveryFeeCollected Boolean         @default(false)
  deliveryAddress      String?
  deliveryDate         DateTime?
  deliveryTime         String?
  productId            String?
  deliveryProfile      DeliveryProfile @relation(fields: [deliveryProfileId], references: [id])
  order                Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product              Product?        @relation(fields: [productId], references: [id])

  @@map("DeliveryOrder")
}

model HomeCheffCollection {
  id                   String   @id @default(cuid())
  platformFees         Int
  deliveryFeeCuts      Int
  totalAmount          Int
  status               String   @default("PENDING")
  description          String?
  processedOrdersCount Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("HomeCheffCollection")
}

model VehiclePhoto {
  id                String          @id @default(cuid())
  deliveryProfileId String
  fileUrl           String
  sortOrder         Int
  createdAt         DateTime        @default(now())
  deliveryProfile   DeliveryProfile @relation(fields: [deliveryProfileId], references: [id], onDelete: Cascade)

  @@index([deliveryProfileId])
  @@map("VehiclePhoto")
}

model DeliveryReview {
  id                String          @id @default(cuid())
  deliveryProfileId String
  reviewerId        String
  orderId           String?
  rating            Int
  comment           String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deliveryProfile   DeliveryProfile @relation(fields: [deliveryProfileId], references: [id], onDelete: Cascade)
  order             Order?          @relation(fields: [orderId], references: [id])
  reviewer          User            @relation("DeliveryReviewReviewer", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([deliveryProfileId, reviewerId, orderId])
  @@index([deliveryProfileId])
  @@index([reviewerId])
  @@map("DeliveryReview")
}

model WorkplacePhoto {
  id              String        @id @default(cuid())
  sellerProfileId String
  role            String
  fileUrl         String
  sortOrder       Int
  createdAt       DateTime      @default(now())
  sellerProfile   SellerProfile @relation(fields: [sellerProfileId], references: [id], onDelete: Cascade)

  @@index([sellerProfileId])
  @@index([role])
  @@map("WorkplacePhoto")
}

model WorkspaceContent {
  id              String                    @id @default(cuid())
  sellerProfileId String
  type            WorkspaceContentType
  title           String
  description     String?
  isPublic        Boolean                   @default(true)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  designItem      DesignItem?
  growingProcess  GrowingProcess?
  recipe          Recipe?
  sellerProfile   SellerProfile             @relation(fields: [sellerProfileId], references: [id], onDelete: Cascade)
  comments        WorkspaceContentComment[]
  photos          WorkspaceContentPhoto[]
  props           WorkspaceContentProp[]

  @@index([sellerProfileId])
  @@index([type])
  @@index([isPublic])
  @@map("WorkspaceContent")
}

model WorkspaceContentPhoto {
  id                 String           @id @default(cuid())
  workspaceContentId String
  fileUrl            String
  sortOrder          Int
  caption            String?
  createdAt          DateTime         @default(now())
  workspaceContent   WorkspaceContent @relation(fields: [workspaceContentId], references: [id], onDelete: Cascade)

  @@index([workspaceContentId])
  @@map("WorkspaceContentPhoto")
}

model WorkspaceContentProp {
  id                 String           @id @default(cuid())
  workspaceContentId String
  userId             String
  createdAt          DateTime         @default(now())
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceContent   WorkspaceContent @relation(fields: [workspaceContentId], references: [id], onDelete: Cascade)

  @@unique([workspaceContentId, userId])
  @@index([workspaceContentId])
  @@index([userId])
  @@map("WorkspaceContentProp")
}

model WorkspaceContentComment {
  id                 String                    @id @default(cuid())
  workspaceContentId String
  userId             String
  content            String
  parentId           String?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  parent             WorkspaceContentComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies            WorkspaceContentComment[] @relation("CommentReplies")
  user               User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceContent   WorkspaceContent          @relation(fields: [workspaceContentId], references: [id], onDelete: Cascade)

  @@index([workspaceContentId])
  @@index([userId])
  @@index([parentId])
  @@map("WorkspaceContentComment")
}

model Recipe {
  id                 String           @id @default(cuid())
  workspaceContentId String           @unique
  servings           Int?
  prepTime           Int?
  cookTime           Int?
  difficulty         String?
  ingredients        Json
  instructions       Json
  tags               String[]         @default([])
  source             String?
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  workspaceContent   WorkspaceContent @relation(fields: [workspaceContentId], references: [id], onDelete: Cascade)

  @@map("Recipe")
}

model GrowingProcess {
  id                 String           @id @default(cuid())
  workspaceContentId String           @unique
  plantName          String
  plantType          String?
  variety            String?
  startDate          DateTime?
  expectedHarvest    DateTime?
  growingMethod      String?
  soilType           String?
  wateringSchedule   String?
  currentStage       String?
  weeklyUpdates      Json
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  workspaceContent   WorkspaceContent @relation(fields: [workspaceContentId], references: [id], onDelete: Cascade)

  @@map("GrowingProcess")
}

model DesignItem {
  id                 String           @id @default(cuid())
  workspaceContentId String           @unique
  category           String?
  materials          String[]         @default([])
  techniques         String[]         @default([])
  dimensions         String?
  inspiration        String?
  process            Json
  challenges         String?
  solutions          String?
  tags               String[]         @default([])
  isForSale          Boolean          @default(false)
  priceCents         Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  workspaceContent   WorkspaceContent @relation(fields: [workspaceContentId], references: [id], onDelete: Cascade)

  @@map("DesignItem")
}

model AnalyticsEvent {
  id         String   @id @default(uuid())
  eventType  String
  entityType String
  entityId   String
  userId     String?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([eventType, entityType])
  @@index([entityId])
  @@index([userId])
  @@index([createdAt])
  @@index([createdAt], map: "idx_analytics_event_created_at")
  @@index([userId], map: "idx_analytics_event_user")
}

model EncryptionKey {
  id        String    @id @default(uuid())
  userId    String
  keyHash   String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([keyHash])
  @@index([isActive])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum UserRole {
  USER
  ADMIN
  BUYER
  SELLER
  DELIVERY

  @@map("UserRole")
}

enum MessagePrivacy {
  NOBODY
  FANS_ONLY
  EVERYONE

  @@map("MessagePrivacy")
}

enum FanRequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("FanRequestStatus")
}

enum DeliveryMode {
  PICKUP
  DELIVERY
  BOTH
}

enum TransportationMode {
  BIKE
  EBIKE
  SCOOTER
  CAR
}

enum ListingCategory {
  HOMECHEFF
  HOMEGROWN
  OTHER
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PAUSED
  REMOVED
  MODERATED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  PRODUCT_SHARE
  SYSTEM
  ORDER_STATUS_UPDATE
  ORDER_PICKUP_INFO
  ORDER_DELIVERY_INFO
  ORDER_ADDRESS_UPDATE
}

enum NotificationType {
  NEW_LISTING_NEARBY
  RESERVATION_UPDATE
  MESSAGE_RECEIVED
  ADMIN_NOTICE
  NEW_CONVERSATION
  MESSAGE_REACTION
}

enum ProductCategory {
  CHEFF
  GROWN
  DESIGNER
}

enum ReportStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
  COMPLETED
}

enum TransactionStatus {
  CREATED
  AUTHORIZED
  CAPTURED
  CANCELLED
  REFUNDED
  FAILED
}

enum Unit {
  PORTION
  STUK
  HUNDRED_G
  KG
  BOSJE
  SET
  METER
  CM
  M2
}

enum DishStatus {
  PRIVATE
  PUBLISHED
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum WorkspaceContentType {
  RECIPE
  GROWING_PROCESS
  DESIGN_ITEM
}
