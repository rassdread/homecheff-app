generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                     String                    @id @default(uuid())
  email                                  String                    @unique
  createdAt                              DateTime                  @default(now())
  bio                                    String?
  emailVerified                          DateTime?
  image                                  String?
  lat                                    Float?
  lng                                    Float?
  place                                  String?
  updatedAt                              DateTime                  @updatedAt
  role                                   UserRole                  @default(USER)
  name                                   String?
  passwordHash                           String?
  profileImage                           String?
  username                               String?                   @unique
  interests                              String[]
  accountHolderName                      String?
  bankName                               String?
  buyerRoles                             String[]                  @default([])
  displayFullName                        Boolean                   @default(true)
  gender                                 String?
  iban                                   String?
  marketingAccepted                      Boolean                   @default(false)
  marketingAcceptedAt                    DateTime?
  privacyPolicyAccepted                  Boolean                   @default(false)
  privacyPolicyAcceptedAt                DateTime?
  sellerRoles                            String[]                  @default([])
  stripeConnectAccountId                 String?
  stripeConnectOnboardingCompleted       Boolean                   @default(false)
  taxResponsibilityAccepted              Boolean                   @default(false)
  taxResponsibilityAcceptedAt            DateTime?
  termsAccepted                          Boolean                   @default(false)
  termsAcceptedAt                        DateTime?
  Account                                Account[]
  AdminAction                            AdminAction[]
  AuditLog                               AuditLog[]
  Business                               Business?
  ConversationParticipant                ConversationParticipant[]
  DeviceToken                            DeviceToken[]
  Dish                                   Dish[]
  Favorite                               Favorite[]
  followsAsFollower                      Follow[]                  @relation("FollowAsFollower")
  followsAsSeller                        Follow[]                  @relation("FollowAsSeller")
  Listing                                Listing[]
  Message                                Message[]
  Notification                           Notification[]
  orders                                 Order[]                   @relation("UserOrders")
  Payout                                 Payout[]
  productReviewsAsBuyer                  ProductReview[]           @relation("ProductReviewBuyer")
  Report_Report_reporterIdToUser         Report[]                  @relation("Report_reporterIdToUser")
  Report_Report_targetUserIdToUser       Report[]                  @relation("Report_targetUserIdToUser")
  Reservation_Reservation_buyerIdToUser  Reservation[]             @relation("Reservation_buyerIdToUser")
  Reservation_Reservation_sellerIdToUser Reservation[]             @relation("Reservation_sellerIdToUser")
  reviewResponsesAsSeller                ReviewResponse[]          @relation("ReviewResponseSeller")
  SellerProfile                          SellerProfile?
  DeliveryProfile                        DeliveryProfile?
  Session                                Session[]
  Transaction                            Transaction[]
}

model Business {
  id              String   @id @default(uuid())
  userId          String   @unique
  name            String
  kvkNumber       String?
  vatNumber       String?
  address         String?
  city            String?
  country         String?  @default("NL")
  verified        Boolean  @default(false)
  createdAt       DateTime @default(now())
  workplacePhotos String[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id              String          @id @default(uuid())
  sellerId        String
  category        ProductCategory
  title           String
  description     String
  priceCents      Int
  unit            Unit
  delivery        DeliveryMode
  createdAt       DateTime        @default(now())
  isActive        Boolean         @default(true)
  displayNameType String          @default("fullname")
  maxStock        Int?
  stock           Int             @default(0)
  conversations   Conversation[]
  favorites       Favorite[]
  Image           Image[]
  orderItems      OrderItem[]
  seller          SellerProfile   @relation("SellerProducts", fields: [sellerId], references: [id])
  reviews         ProductReview[]

  @@index([category])
  @@index([sellerId])
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AdminAction {
  id        String   @id
  adminId   String
  reportId  String?
  action    String
  notes     String?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  Report    Report?  @relation(fields: [reportId], references: [id])
}

model AuditLog {
  id        String   @id
  userId    String?
  listingId String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  Listing   Listing? @relation(fields: [listingId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
}

model Conversation {
  id                      String                    @id
  createdAt               DateTime                  @default(now())
  reservationId           String?                   @unique
  isActive                Boolean                   @default(true)
  lastMessageAt           DateTime?
  productId               String?
  title                   String?
  updatedAt               DateTime                  @updatedAt
  orderId                 String?
  Order                   Order?                    @relation(fields: [orderId], references: [id])
  Product                 Product?                  @relation(fields: [productId], references: [id])
  Reservation             Reservation?              @relation(fields: [reservationId], references: [id])
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]

  @@index([productId])
  @@index([orderId])
  @@index([lastMessageAt])
}

model ConversationParticipant {
  id             String       @id
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model Coupon {
  id              String    @id
  code            String    @unique
  description     String?
  discountCents   Int?
  discountPercent Int?
  validFrom       DateTime?
  validUntil      DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
}

model DeviceToken {
  id        String   @id
  userId    String
  token     String   @unique
  platform  String?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Favorite {
  userId    String
  listingId String?
  createdAt DateTime @default(now())
  id        String   @id @default(uuid())
  productId String?
  Listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@unique([userId, productId])
  @@index([listingId])
  @@index([productId])
}

model Image {
  id        String  @id
  fileUrl   String
  sortOrder Int
  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

model Listing {
  id           String          @id
  ownerId      String
  title        String
  description  String
  priceCents   Int
  category     ListingCategory
  status       ListingStatus   @default(DRAFT)
  place        String?
  lat          Float?
  lng          Float?
  isPublic     Boolean         @default(true)
  viewCount    Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  AuditLog     AuditLog[]
  Favorite     Favorite[]
  User         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ListingMedia ListingMedia[]
  ListingTag   ListingTag[]
  Report       Report[]
  Reservation  Reservation[]

  @@index([lat, lng])
  @@index([status, category, createdAt])
}

model ListingMedia {
  id        String   @id
  listingId String
  url       String
  width     Int?
  height    Int?
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  Listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId, order])
}

model ListingTag {
  listingId String
  tagId     String
  Listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  Tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([listingId, tagId])
  @@index([tagId])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  text           String?
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  attachmentName String?
  attachmentType String?
  attachmentUrl  String?
  deletedAt      DateTime?
  editedAt       DateTime?
  messageType    MessageType  @default(TEXT)
  orderNumber    String?
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([orderNumber])
}

model Notification {
  id        String           @id
  userId    String
  type      NotificationType
  payload   Json
  readAt    DateTime?
  createdAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Payout {
  id            String      @id
  transactionId String
  amountCents   Int
  toUserId      String
  createdAt     DateTime    @default(now())
  providerRef   String?
  User          User        @relation(fields: [toUserId], references: [id], onDelete: Cascade)
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Refund {
  id            String      @id
  transactionId String
  amountCents   Int
  createdAt     DateTime    @default(now())
  providerRef   String?
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Report {
  id                             String        @id
  listingId                      String?
  reporterId                     String
  targetUserId                   String?
  reason                         String
  status                         ReportStatus  @default(OPEN)
  createdAt                      DateTime      @default(now())
  resolvedAt                     DateTime?
  AdminAction                    AdminAction[]
  Listing                        Listing?      @relation(fields: [listingId], references: [id])
  User_Report_reporterIdToUser   User          @relation("Report_reporterIdToUser", fields: [reporterId], references: [id], onDelete: Cascade)
  User_Report_targetUserIdToUser User?         @relation("Report_targetUserIdToUser", fields: [targetUserId], references: [id])
}

model Reservation {
  id                              String            @id
  listingId                       String
  buyerId                         String
  sellerId                        String
  status                          ReservationStatus @default(PENDING)
  message                         String?
  quantity                        Int               @default(1)
  createdAt                       DateTime          @default(now())
  updatedAt                       DateTime
  Conversation                    Conversation?
  User_Reservation_buyerIdToUser  User              @relation("Reservation_buyerIdToUser", fields: [buyerId], references: [id], onDelete: Cascade)
  Listing                         Listing           @relation(fields: [listingId], references: [id], onDelete: Cascade)
  User_Reservation_sellerIdToUser User              @relation("Reservation_sellerIdToUser", fields: [sellerId], references: [id], onDelete: Cascade)
  Transaction                     Transaction?

  @@index([buyerId, status, createdAt])
  @@index([sellerId, status, createdAt])
}

model ProductReview {
  id         String           @id @default(uuid())
  productId  String
  buyerId    String
  orderId    String?
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  buyer      User             @relation("ProductReviewBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  order      Order?           @relation(fields: [orderId], references: [id])
  product    Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  images     ReviewImage[]
  responses  ReviewResponse[]

  @@unique([productId, buyerId])
  @@index([productId])
  @@index([buyerId])
  @@index([rating])
}

model SellerProfile {
  id                     String        @id
  userId                 String        @unique
  displayName            String?
  bio                    String?
  lat                    Float?
  lng                    Float?
  btw                    String?
  companyName            String?
  kvk                    String?
  subscriptionId         String?
  subscriptionValidUntil DateTime?
  
  // Delivery settings
  deliveryMode           String        @default("FIXED") // "FIXED" or "DYNAMIC"
  deliveryRadius         Float         @default(5.0) // in kilometers
  deliveryRegions        String[]      @default([]) // for dynamic mode
  
  // Timestamps
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  
  products               Product[]     @relation("SellerProducts")
  Subscription           Subscription? @relation(fields: [subscriptionId], references: [id])
  User                   User          @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String          @id
  name          String
  priceCents    Int
  feeBps        Int
  durationDays  Int
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  SellerProfile SellerProfile[]
}

model Tag {
  id         String       @id
  slug       String       @unique
  label      String
  ListingTag ListingTag[]
}

model Transaction {
  id             String            @id
  reservationId  String            @unique
  buyerId        String
  sellerId       String
  amountCents    Int
  platformFeeBps Int               @default(0)
  status         TransactionStatus @default(CREATED)
  provider       String?
  providerRef    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime
  Payout         Payout[]
  Refund         Refund[]
  Reservation    Reservation       @relation(fields: [reservationId], references: [id])
  User           User              @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([buyerId, status, createdAt])
  @@index([sellerId, status, createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id              String          @id @default(uuid())
  userId          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  orderNumber     String?
  status          OrderStatus     @default(PENDING)
  totalAmount     Int
  deliveryAddress String?
  deliveryDate    DateTime?
  deliveryMode    DeliveryMode    @default(PICKUP)
  notes           String?
  pickupAddress   String?
  pickupDate      DateTime?
  conversations   Conversation[]
  User            User            @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]
  reviews         ProductReview[]
  deliveryOrder   DeliveryOrder?
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int      @default(1)
  priceCents Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Follow {
  id         String   @id @default(uuid())
  followerId String
  sellerId   String
  createdAt  DateTime @default(now())
  User       User     @relation("FollowAsFollower", fields: [followerId], references: [id], onDelete: Cascade)
  Seller     User     @relation("FollowAsSeller", fields: [sellerId], references: [id], onDelete: Cascade)
}

model Dish {
  id           String        @id @default(uuid())
  userId       String
  title        String?
  description  String?
  status       DishStatus    @default(PRIVATE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  priceCents   Int?
  deliveryMode DeliveryMode?
  lat          Float?
  lng          Float?
  place        String?
  maxStock     Int?
  stock        Int?          @default(0)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos       DishPhoto[]

  @@index([userId])
}

model DishPhoto {
  id     String  @id @default(uuid())
  dishId String
  url    String
  idx    Int     @default(0)
  isMain Boolean @default(false)
  dish   Dish    @relation(fields: [dishId], references: [id], onDelete: Cascade)

  @@index([dishId])
}

model ReviewImage {
  id        String        @id @default(uuid())
  reviewId  String
  url       String
  sortOrder Int           @default(0)
  review    ProductReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model ReviewResponse {
  id        String        @id @default(uuid())
  reviewId  String
  sellerId  String
  comment   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  review    ProductReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  seller    User          @relation("ReviewResponseSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([sellerId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum UserRole {
  USER
  ADMIN
  BUYER
  SELLER

  @@map("UserRole")
}

enum DeliveryMode {
  PICKUP
  DELIVERY
  BOTH
}

enum TransportationMode {
  WALKING
  BIKE
  ELECTRIC_BIKE
  SCOOTER
}

model DeliveryProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal info
  age               Int
  bio               String?
  
  // Transportation settings
  transportation    TransportationMode[]
  maxDistance       Float    @default(3.0) // in kilometers
  preferredRadius   Float?   // user-defined radius in km
  
  // Location settings
  homeLat           Float?
  homeLng           Float?
  homeAddress       String?
  
  // Live location tracking
  currentLat        Float?
  currentLng        Float?
  currentAddress    String?
  lastLocationUpdate DateTime?
  
  // Delivery mode
  deliveryMode      String   @default("FIXED") // "FIXED" or "DYNAMIC"
  deliveryRegions   String[] @default([]) // for dynamic mode
  
  // Availability
  availableDays     String[] // ["maandag", "dinsdag", etc.]
  availableTimeSlots String[] // ["morning", "afternoon", "evening"]
  
  // Status
  isActive          Boolean  @default(true)
  isVerified        Boolean  @default(false)
  
  // Performance tracking
  totalDeliveries   Int      @default(0)
  averageRating     Float?
  totalEarnings     Float    @default(0)
  
  // Relations
  deliveryOrders    DeliveryOrder[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("DeliveryProfile")
}

model DeliveryOrder {
  id              String   @id @default(cuid())
  orderId         String   @unique
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  deliveryProfileId String
  deliveryProfile   DeliveryProfile @relation(fields: [deliveryProfileId], references: [id])
  
  status          String   @default("PENDING") // PENDING, ACCEPTED, PICKED_UP, DELIVERED, CANCELLED
  deliveryFee     Float
  estimatedTime   Int?     // in minutes
  
  // Tracking
  pickedUpAt      DateTime?
  deliveredAt     DateTime?
  
  // Location tracking
  currentLat      Float?
  currentLng      Float?
  
  // Communication
  notes           String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("DeliveryOrder")
}

enum ListingCategory {
  HOMECHEFF
  HOMEGROWN
  OTHER
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PAUSED
  REMOVED
  MODERATED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  PRODUCT_SHARE
  SYSTEM
  ORDER_STATUS_UPDATE
  ORDER_PICKUP_INFO
  ORDER_DELIVERY_INFO
  ORDER_ADDRESS_UPDATE
}

enum NotificationType {
  NEW_LISTING_NEARBY
  RESERVATION_UPDATE
  MESSAGE_RECEIVED
  ADMIN_NOTICE
  NEW_CONVERSATION
  MESSAGE_REACTION
}

enum ProductCategory {
  CHEFF
  GROWN
  DESIGNER
}

enum ReportStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
  COMPLETED
}

enum TransactionStatus {
  CREATED
  AUTHORIZED
  CAPTURED
  CANCELLED
  REFUNDED
  FAILED
}

enum Unit {
  PORTION
  STUK
  HUNDRED_G
  KG
  BOSJE
  SET
  METER
  CM
  M2
}

enum DishStatus {
  PRIVATE
  PUBLISHED
}

enum Role {
  BUYER
  SELLER
  ADMIN
}
