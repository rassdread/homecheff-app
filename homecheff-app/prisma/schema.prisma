generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // mag weg als je geen DIRECT_URL gebruikt
}

model User {
  id                                     String                    @id @default(uuid())
  email                                  String                    @unique
  createdAt                              DateTime                  @default(now())
  bio                                    String?
  emailVerified                          DateTime?
  image                                  String?
  profileImage                           String? // <-- toegevoegd
  lat                                    Float?
  lng                                    Float?
  place                                  String?
  updatedAt                              DateTime                  @updatedAt
  role                                   UserRole                  @default(USER)
  name                                   String?
  username                               String?                   @unique
  passwordHash                           String?
  Account                                Account[]
  AdminAction                            AdminAction[]
  AuditLog                               AuditLog[]
  ConversationParticipant                ConversationParticipant[]
  DeviceToken                            DeviceToken[]
  Favorite                               Favorite[]
  Listing                                Listing[]
  Message                                Message[]
  Notification                           Notification[]
  Payout                                 Payout[]
  Report_Report_reporterIdToUser         Report[]                  @relation("Report_reporterIdToUser")
  Report_Report_targetUserIdToUser       Report[]                  @relation("Report_targetUserIdToUser")
  Reservation_Reservation_buyerIdToUser  Reservation[]             @relation("Reservation_buyerIdToUser")
  Reservation_Reservation_sellerIdToUser Reservation[]             @relation("Reservation_sellerIdToUser")
  Review_Review_revieweeIdToUser         Review[]                  @relation("Review_revieweeIdToUser")
  Review_Review_reviewerIdToUser         Review[]                  @relation("Review_reviewerIdToUser")
  SellerProfile                          SellerProfile?
  Session                                Session[]
  Transaction                            Transaction[]
  orders                                 Order[]                   @relation("UserOrders")
  followsAsFollower                      Follow[]                  @relation("FollowAsFollower")
  followsAsSeller                        Follow[]                  @relation("FollowAsSeller")
  Dish                                   Dish[]
  interests                              String[]
  Business                                Business?
}

model Business {
  id        String  @id @default(uuid())
  userId    String   @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  kvkNumber String?
  vatNumber String?
  address   String?
  city      String?
  country   String? @default("NL")
  verified  Boolean @default(false)
  createdAt DateTime @default(now())
  workplacePhotos String[]

  @@index([userId])
}

model Product {
  id          String          @id @default(uuid())
  sellerId    String
  category    ProductCategory
  title       String
  description String
  priceCents  Int
  unit        Unit
  delivery    DeliveryMode
  createdAt   DateTime        @default(now())
  isActive    Boolean         @default(true)
  Image       Image[]
  seller      SellerProfile   @relation("SellerProducts", fields: [sellerId], references: [id])
  favorites   Favorite[]
  orderItems  OrderItem[]

  @@index([category])
  @@index([sellerId])
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AdminAction {
  id        String   @id
  adminId   String
  reportId  String?
  action    String
  notes     String?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  Report    Report?  @relation(fields: [reportId], references: [id])
}

model AuditLog {
  id        String   @id
  userId    String?
  listingId String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  Listing   Listing? @relation(fields: [listingId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
}

model Conversation {
  id                      String                    @id
  createdAt               DateTime                  @default(now())
  reservationId           String?                   @unique
  Reservation             Reservation?              @relation(fields: [reservationId], references: [id])
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]
}

model ConversationParticipant {
  id             String       @id
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model Coupon {
  id              String    @id
  code            String    @unique
  description     String?
  discountCents   Int?
  discountPercent Int?
  validFrom       DateTime?
  validUntil      DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
}

model DeviceToken {
  id        String   @id
  userId    String
  token     String   @unique
  platform  String?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  listingId  String?
  productId  String?
  createdAt  DateTime @default(now())
  Listing    Listing?  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  Product    Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@unique([userId, productId])
  @@index([listingId])
  @@index([productId])
}

model Image {
  id        String  @id
  fileUrl   String
  sortOrder Int
  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

model Listing {
  id           String          @id
  ownerId      String
  title        String
  description  String
  priceCents   Int
  category     ListingCategory
  status       ListingStatus   @default(DRAFT)
  place        String?
  lat          Float?
  lng          Float?
  isPublic     Boolean         @default(true)
  viewCount    Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  AuditLog     AuditLog[]
  Favorite     Favorite[]
  User         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ListingMedia ListingMedia[]
  ListingTag   ListingTag[]
  Report       Report[]
  Reservation  Reservation[]
  Review       Review[]

  @@index([lat, lng])
  @@index([status, category, createdAt])
}

model ListingMedia {
  id        String   @id
  listingId String
  url       String
  width     Int?
  height    Int?
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  Listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId, order])
}

model ListingTag {
  listingId String
  tagId     String
  Listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  Tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([listingId, tagId])
  @@index([tagId])
}

model Message {
  id             String       @id
  conversationId String
  senderId       String
  text           String
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

model Notification {
  id        String           @id
  userId    String
  type      NotificationType
  payload   Json
  readAt    DateTime?
  createdAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Payout {
  id            String      @id
  transactionId String
  amountCents   Int
  toUserId      String
  createdAt     DateTime    @default(now())
  providerRef   String?
  User          User        @relation(fields: [toUserId], references: [id], onDelete: Cascade)
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Refund {
  id            String      @id
  transactionId String
  amountCents   Int
  createdAt     DateTime    @default(now())
  providerRef   String?
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Report {
  id                             String        @id
  listingId                      String?
  reporterId                     String
  targetUserId                   String?
  reason                         String
  status                         ReportStatus  @default(OPEN)
  createdAt                      DateTime      @default(now())
  resolvedAt                     DateTime?
  AdminAction                    AdminAction[]
  Listing                        Listing?      @relation(fields: [listingId], references: [id])
  User_Report_reporterIdToUser   User          @relation("Report_reporterIdToUser", fields: [reporterId], references: [id], onDelete: Cascade)
  User_Report_targetUserIdToUser User?         @relation("Report_targetUserIdToUser", fields: [targetUserId], references: [id])
}

model Reservation {
  id                              String            @id
  listingId                       String
  buyerId                         String
  sellerId                        String
  status                          ReservationStatus @default(PENDING)
  message                         String?
  quantity                        Int               @default(1)
  createdAt                       DateTime          @default(now())
  updatedAt                       DateTime
  Conversation                    Conversation?
  User_Reservation_buyerIdToUser  User              @relation("Reservation_buyerIdToUser", fields: [buyerId], references: [id], onDelete: Cascade)
  Listing                         Listing           @relation(fields: [listingId], references: [id], onDelete: Cascade)
  User_Reservation_sellerIdToUser User              @relation("Reservation_sellerIdToUser", fields: [sellerId], references: [id], onDelete: Cascade)
  Transaction                     Transaction?

  @@index([buyerId, status, createdAt])
  @@index([sellerId, status, createdAt])
}

model Review {
  id                           String   @id
  listingId                    String
  reviewerId                   String
  revieweeId                   String
  rating                       Int
  comment                      String?
  createdAt                    DateTime @default(now())
  Listing                      Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  User_Review_revieweeIdToUser User     @relation("Review_revieweeIdToUser", fields: [revieweeId], references: [id], onDelete: Cascade)
  User_Review_reviewerIdToUser User     @relation("Review_reviewerIdToUser", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([listingId, reviewerId])
  @@index([listingId])
  @@index([revieweeId, createdAt])
}

model SellerProfile {
  id                     String        @id
  userId                 String        @unique
  displayName            String?
  bio                    String?
  lat                    Float?
  lng                    Float?
  btw                    String?
  companyName            String?
  kvk                    String?
  subscriptionId         String?
  subscriptionValidUntil DateTime?
  products               Product[]     @relation("SellerProducts")
  Subscription           Subscription? @relation(fields: [subscriptionId], references: [id])
  User                   User          @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String          @id
  name          String
  priceCents    Int
  feeBps        Int
  durationDays  Int
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  SellerProfile SellerProfile[]
}

model Tag {
  id         String       @id
  slug       String       @unique
  label      String
  ListingTag ListingTag[]
}

model Transaction {
  id             String            @id
  reservationId  String            @unique
  buyerId        String
  sellerId       String
  amountCents    Int
  platformFeeBps Int               @default(0)
  status         TransactionStatus @default(CREATED)
  provider       String?
  providerRef    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime
  Payout         Payout[]
  Refund         Refund[]
  Reservation    Reservation       @relation(fields: [reservationId], references: [id])
  User           User              @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([buyerId, status, createdAt])
  @@index([sellerId, status, createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  priceCents Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Follow {
  id         String   @id @default(uuid())
  followerId String
  sellerId   String
  createdAt  DateTime @default(now())
  User       User     @relation("FollowAsFollower", fields: [followerId], references: [id], onDelete: Cascade)
  Seller     User     @relation("FollowAsSeller", fields: [sellerId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  BUYER
  SELLER

  @@map("UserRole")
}

enum DeliveryMode {
  PICKUP
  DELIVERY
  BOTH
}

enum ListingCategory {
  HOMECHEFF
  HOMEGROWN
  OTHER
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PAUSED
  REMOVED
  MODERATED
}

enum NotificationType {
  NEW_LISTING_NEARBY
  RESERVATION_UPDATE
  MESSAGE_RECEIVED
  ADMIN_NOTICE
}

enum ProductCategory {
  CHEFF
  GROWN
  DESIGNER
}

enum ReportStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
  COMPLETED
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum TransactionStatus {
  CREATED
  AUTHORIZED
  CAPTURED
  CANCELLED
  REFUNDED
  FAILED
}

enum Unit {
  PORTION
  STUK
  HUNDRED_G
  KG
  BOSJE
  SET
  METER
  CM
  M2
}

// --- HomeCheff additions (non-destructief) ---
enum DishStatus {
  PRIVATE
  PUBLISHED
}

model Dish {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String?
  description  String?
  status       DishStatus    @default(PRIVATE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  photos       DishPhoto[]
  // publicatievelden:
  priceCents   Int?
  deliveryMode DeliveryMode?
  lat          Float?
  lng          Float?
  place        String?

  @@index([userId])
}

model DishPhoto {
  id     String @id @default(uuid())
  dishId String
  dish   Dish   @relation(fields: [dishId], references: [id], onDelete: Cascade)
  url    String
  idx    Int    @default(0)

  @@index([dishId])
}
